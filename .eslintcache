[{"C:\\Users\\Admin\\Desktop\\hand_recognition\\handpose\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\hand_recognition\\handpose\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\hand_recognition\\handpose\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\Desktop\\hand_recognition\\handpose\\src\\utilities.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":3929,"mtime":1611072390126,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":2738,"mtime":1610990092812,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1g0t95b",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Desktop\\hand_recognition\\handpose\\src\\index.js",[],["20","21"],"C:\\Users\\Admin\\Desktop\\hand_recognition\\handpose\\src\\App.js",["22","23"],"import React, { useRef, useState } from \"react\";\n// import logo from './logo.svg';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\n\n///////// NEW STUFF IMPORTS\nimport * as fp from \"fingerpose\";\nimport victory from \"./victory.png\";\nimport thumbs_up from \"./thumbs_up.png\";\n///////// NEW STUFF IMPORTS\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  \n  ///////// NEW STUFF ADDED STATE HOOK\n  const [emoji, setEmoji] = useState(null);\n  const images = { thumbs_up: thumbs_up, victory: victory };\n  ///////// NEW STUFF ADDED STATE HOOK\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n\n       ///////// NEW STUFF ADDED GESTURE HANDLING\n\n       if (hand.length > 0) {\n        const GE = new fp.GestureEstimator([\n          fp.Gestures.VictoryGesture,\n          fp.Gestures.ThumbsUpGesture,\n        ]);\n        const gesture = await GE.estimate(hand[0].landmarks, 4);\n        if (gesture.gestures !== undefined && gesture.gestures.length > 0) {\n          // console.log(gesture.gestures);\n\n          const confidence = gesture.gestures.map(\n            (prediction) => prediction.confidence\n          );\n          const maxConfidence = confidence.indexOf(\n            Math.max.apply(null, confidence)\n          );\n          // console.log(gesture.gestures[maxConfidence].name);\n          setEmoji(gesture.gestures[maxConfidence].name);\n          console.log(emoji);\n        }\n      }\n\n      ///////// NEW STUFF ADDED GESTURE HANDLING\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  runHandpose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}  \n        />\n        {/* NEW STUFF */}\n        {emoji !== null ? (\n          <img\n            src={images[emoji]}\n            style={{\n              position: \"absolute\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              left: 400,\n              bottom: 500,\n              right: 0,\n              textAlign: \"center\",\n              height: 100,\n            }}\n          />\n        ) : (\n          \"\"\n        )}\n\n        {/* NEW STUFF */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Admin\\Desktop\\hand_recognition\\handpose\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Desktop\\hand_recognition\\handpose\\src\\utilities.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":3,"column":13,"nodeType":"30","messageId":"31","endLine":3,"endColumn":15},{"ruleId":"32","severity":1,"message":"33","line":123,"column":11,"nodeType":"34","endLine":135,"endColumn":13},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]